# -*- coding: utf-8 -*-
"""project1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fp3EwA54SgjYj5cJtDM-fdSpwqMPdlty
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading the csv data pandas dataframe
heart_data=pd.read_csv('/content/heart_disease_data.csv')

#print first 5 rows of the data set
heart_data.head()

#print last 5 rows
heart_data.tail()

#print no. of rows and col
heart_data.shape

#getting some info about the data
heart_data.info()

#checking for missing values
heart_data.isnull().sum()

heart_data.describe()

#checking the distribution of target variables
heart_data['target'].value_counts()

#1 -->defective 0--> healthy

#splitting the features and target
x=heart_data.drop(columns='target',axis=1)

y=heart_data['target']

print(x)

print(y)

#splitting the data into training nad test data
x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape, x_train.shape, x_test.shape)

#model training
#logistic regression ,also used for classical problems
model = LogisticRegression()

#training the model with data
model.fit(x_train,y_train)

#model evaluation
#accuracy score
#on training data
x_train_prediction=model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)

print('Accuracy on training data:',training_data_accuracy)

#on test data
x_test_prediction=model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction,y_test)

print('Accuracy on test data:',test_data_accuracy)

#building the predictive system
input_data=(41,0,1,130,204,0,0,172,0,1.4,2,0,2)
#change the input data to numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape numpy array,one feature
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction=model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]==0):
  print('The person doesnot have Heart Disease')
else:
    print('The person has heart disease')





